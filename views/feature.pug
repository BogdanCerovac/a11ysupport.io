extends layout
include test-case/assertion

block content
  div.content-wrapper
    div.content
      h1= data.title + ' (' + data.techId + ')'
      div(class="current-support-container " + data.core_support_string.sr.class)
        p= 'Screen reader support level: ' + data.core_support_string.sr.string
      div(class="current-support-container " + data.core_support_string.vc.class)
        p= 'Voice Control support level: ' + data.core_support_string.vc.string

      if data.assertions.length
        h2 On this page
        ul.link-list
          li
            a(href="#test-html") Expectations
            ul
              each assertion, index in data.assertions
                li
                  a(href="#support-table-"+ index) #{testHelper.trimTechFromAssertion(assertion.title)}
          if related_features.length
            li
              a(href="#related-features") Related features
          li
            a(href="#related-tests") Related tests
          li
            a(href="#at-browser-issues") Related AT or browser issues

          li
            a(href="#feedback") Is something not right?

      p!= md.render(data.description)

      if data.recommendation
        p!= md.render(data.recommendation)

      h2 Expectations
      p
        a(href="/faq#what-are-expectations%3F") What are expectations?

      if data.assertions.length > 0

        each at_type in [{type: 'sr', title: 'Screen Reader'}, {type: 'vc', title: 'Voice Control'}]
          h3(id='support-table-by-assertion-and-at-'+at_type.type) #{at_type.title} support by expectation
          - var some_support_behind_settings = false
          - var colspan = 0;
          - var assertions_found = 0;
          div.responsive-table
            table(aria-labelledby='support-table-by-assertion-and-at-'+at_type.type)
              tr
                th Expectation
                each at_id in ATBrowsers.core_at
                  if ATBrowsers.at[at_id].type !== at_type.type
                    - continue
                  th #{ATBrowsers.at[at_id].title}
                  - colspan++;
              each assertion, index in data.assertions
                if assertion.strength[at_type.type] === "NA"
                  - continue
                if assertion.tests.length > 0
                    - assertions_found++;
                    tr
                      th
                        a(href="#support-table-" + index) #{assertion.strength[at_type.type]} #{testHelper.trimTechFromAssertion(assertion.title)}
                      each at in ATBrowsers.core_at
                        if ATBrowsers.at[at].type !== at_type.type
                          - continue
                        td(class='support-case ' + assertion.core_support_by_at[at].string.class)= assertion.core_support_by_at[at].string.string
                          if (assertion.core_support_by_at[at].some_support_behind_settings)
                            - some_support_behind_settings = true
                            span *
              if assertions_found === 0
                tr
                  td(colspan=colspan+1) Not applicable
          if (some_support_behind_settings)
            p * means that some support is hidden behind settings


        each assertion, index in data.assertions
          h3(id='support-table-'+index) Expectation: #{assertion.title}

          if (assertion.rationale)
            p Rationale: #{assertion.rationale}

          p Strength of these expectations for different types of assistive technologies:
          ul
            li Screen Readers: #{assertion.strength.sr}
            li Voice Control: #{assertion.strength.vc}

          if assertion.tests.length > 0
            - var some_support_behind_settings = false
            table(aria-labelledby='support-table-' + index)
              tr
                th AT
                th Browser
                th Has Support
              each at in ATBrowsers.core_at
                each browser in ATBrowsers.at[at].core_browsers
                  tr
                    td= ATBrowsers.at[at].title
                    td= ATBrowsers.browsers[browser].title
                    td(class='support-case ' + assertion.core_support_by_at_browser[at][browser].string.class)= assertion.core_support_by_at_browser[at][browser].string.string
                      if (assertion.core_support_by_at_browser[at][browser].some_support_behind_settings)
                        - some_support_behind_settings = true
                        span *
            if (some_support_behind_settings)
              p * means that some support is hidden behind settings

            p This expectation is referenced by #{assertion.tests.length} tests.
            details
              summary Tests that reference this expectation
              table
                tr
                  th Test name
                  th Screen Reader support
                  th Voice Control support
                each test in assertion.tests
                  tr
                    td
                      a(href="/tests/" + testHelper.makeSafe(test.id)) #{test.title}
                    td(class='support-case ' + test.core_support_string.sr.class) #{test.core_support_string.sr.string}
                    td(class='support-case ' + test.core_support_string.vc.class) #{test.core_support_string.vc.string}
          else
            p No tests reference this expectation yet.
      else
        p No expectations have been created for this feature yet.

      if related_features.length
        div.search-results
          h2 Related features

          p These are features that are usually used in combination with this feature.

          each feature in related_features
            div(data-keywords=feature.keywords_string).result
              h2
                a(href='/tech/' + feature.techId + '/' + feature.id) #{feature.title} (#{feature.techId})
              div.responsive-table
                table
                  thead
                    tr
                      each at_id in ATBrowsers.core_at
                        th #{ATBrowsers.at[at_id].short_title}
                  tbody
                    tr
                      each at_id in ATBrowsers.core_at
                        td(class=feature.core_support_by_at[at_id].string.class) #{feature.core_support_by_at[at_id].string.string}
              if feature.core_support.sr.includes('u') || feature.core_support.vc.includes('u')
                p We are missing data on some combinations.

    div.sidebar
      h2(id="related-tests") Tests
      ul
        each test in data.tests
          li
            a(href="/tests/" + testHelper.makeSafe(test.id)) #{test.title} - last updated #{test.history[test.history.length - 1].date}

      if data.related_issues && data.related_issues.length
        h2(id="at-browser-issues") Related issues, discussions, and bugs
        ul
          each link in data.related_issues
            li
              a(href=link.url) #{link.title}

      h2(id="feedback") Is something not right?
      p We use our #[a(href="https://github.com/accessibilitysupported/accessibilitysupported") GitHub repository] to manage our issue tracking. Please provide as much information as you can for issues, and please leave the id in the issue title intact.
      a(href="https://github.com/accessibilitysupported/accessibilitysupported/issues/new?title="+data.id+"&labels=tech%20feature") Create an issue for this feature

      if data.references
        h2(id="related-features") References
        ul
          each reference in data.references
            li
              a(href=reference.url) #{reference.title}
