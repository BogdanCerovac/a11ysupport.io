extends layout
include test-case/assertion

block content
  div.content-wrapper
    div.content
      h1= data.title + ' (' + data.techId + ')'
      div(class="current-support-container " + data.core_support_string.class)
        p= 'Support level: ' + data.core_support_string.string

      if data.assertions.length
        h2 On this page
        ul
          li
            a(href="#test-html") Expectations
            ul
              li
                a(href="#assertion-summary-table") Support summary by expectation type
              each assertion, index in data.assertions
                li
                  a(href="#support-table-"+ index) #{testHelper.trimTechFromAssertion(assertion.title)}
          li
            a(href="#related-tests") Related tests
          li
            a(href="#at-browser-issues") Related AT or browser issues

          li
            a(href="#feedback") Is something not right?

      p!= md.render(data.description)

      if data.recommendation
        p!= md.render(data.recommendation)

      h2 Expectations
      p Expectations are conditions that must be met for the feature to be considered as "supported". Only "MUST" expectations need to be met for minimal "support". "SHOULD" and "MAY" expectations indicates support that goes above and beyond. Note that there is not an explicit standard that dictates these expectations, and as such, they are likely opinionated. As such, a feature might not meet all "MUST" expectations but still be usable (potentially frustratingly so). Additionally, the assistive technology may provide many different commands to read, navigate, or otherwise interact with a feature. Only one command is required to pass for the expectation to be minimally supported.

      if data.assertions.length > 0

        h3(id="assertion-summary-table") Summary of support by expectation type

        table.support-table
          thead
            tr
              th MUST
              th SHOULD
              th MAY
          tbody
            tr
              td(class="current-support-container " + data.core_must_support_string.class) #{data.core_must_support_string.string}
              td(class="current-support-container " + data.core_should_support_string.class) #{data.core_should_support_string.string}
              td(class="current-support-container " + data.core_may_support_string.class) #{data.core_may_support_string.string}

        h3(id='support-table-by-assertion-and-at') Summary of support by expectation and assistive technology
        table(aria-labelledby='support-table-' + index)
          tr
            th Expectation
            each at in ATBrowsers.at
              th #{at.title}
          each assertion, index in data.assertions
            if assertion.tests.length > 0
                tr
                  th
                    a(href="#support-table-" + index) #{testHelper.trimTechFromAssertion(assertion.title)}
                  each at in ATBrowsers.core_at
                    td(class='support-case ' + assertion.core_support_by_at[at].string.class)= assertion.core_support_by_at[at].string.string


        each assertion, index in data.assertions
          h3(id='support-table-'+index) #{assertion.title}

          if (assertion.rationale)
            p Rationale: #{assertion.rationale}

          if assertion.tests.length > 0
            table(aria-labelledby='support-table-' + index)
              tr
                th AT
                th Browser
                th Has Support
              each at in ATBrowsers.core_at
                each browser in ATBrowsers.at[at].core_browsers
                  tr
                    td= ATBrowsers.at[at].title
                    td= ATBrowsers.browsers[browser].title
                    td(class='support-case ' + assertion.core_support_by_at_browser[at][browser].string.class)= assertion.core_support_by_at_browser[at][browser].string.string

            p This expectation is referenced by #{assertion.tests.length} tests.
            details
              summary Tests that reference this expectation
              table
                tr
                  th test name
                  th has support
                each test in assertion.tests
                  tr
                    td
                      a(href="/tests/"+testHelper.makeSafe(test.id)) #{test.title}
                    td(class='support-case ' + test.core_support_string.class) #{test.core_support_string.string}
          else
            p No tests reference this expectation yet.
      else
        p No expectations have been created for this feature yet.

      h2(id="related-tests") Tests
      ul
        each test in data.tests
          li
            a(href="/tests/" + testHelper.makeSafe(test.id)) #{test.title} - last updated #{test.history[test.history.length-1].date}

    div.sidebar
      if data.related_issues && data.related_issues.length
        h2(id="at-browser-issues") Related issues, discussions, and bugs
        ul
          each link in data.related_issues
            li
              a(href=link.url) #{link.title}

      h2(id="feedback") Is something not right?
      p We use our #[a(href="https://github.com/accessibilitysupported/accessibilitysupported") GitHub repository] to manage our issue tracking. Please provide as much information as you can for issues, and please leave the id in the issue title intact.
      a(href="https://github.com/accessibilitysupported/accessibilitysupported/issues/new?title="+data.id+"&labels=tech%20feature") Create an issue for this feature

      if data.references
        h2 References
        ul
          each reference in data.references
            li
              a(href=reference.url) #{reference.title}
