extends layout
include test-case/assertion

block content
    div.content-wrapper
        div.content
            h1= 'Test: ' + test.title
            div(class="current-support-container "+test.core_support_string.substring(0,2))
                p= 'Current support: ' + test.core_support_string

            p!= md.renderInline(test.description)

            a(href="/tests/" + testIdHelper.makeSafe(test.id) + "/run") Run this test and and submit your results

            h2 On this page
            ul
                li
                    a(href="#test-html") Test HTML
                li
                    a(href="#support-tables") Support tables
                li
                    a(href="#history") History

            h2(id="test-html") Test HTML
            if (test.html_file.startsWith('http'))
                a(href=test.html_file) view the external test
            else if (testHTML && testHTML.split(/\r\n|\r|\n/).length < 30)
                a(href="/tests/html/" + test.html_file target="_blank") open the test page in a new tab
                pre.test-html
                    code= testHTML
            else
                a(href="/tests/html/" + test.html_file target="_blank") open the test page in a new tab
                p HTML source is too long to display here.


            h2(id="support-tables") Support tables

            p Assertions are conditions that must be met for the feature to be considered as "supported". Only "MUST" assertions need to be met for minimal "support". "SHOULD" and "MAY" assertions indicates support that goes above and beyond. Note that there is not an explicit standard that dictates these assertions, and as such, they are likely opinionated. Minimal support reflects that the structure, relationships, and functionality of the feature are conveyed and operable by assistive technology rather than minimal conformance to any specific WCAG SC. As such, a feature might not meet all "MUST" assertions but still be usable (potentially frustratingly so).

            h3(id="assertion-summary-table") Assertion support summary by type of assertion
                table.support-table
                    thead
                        tr
                            th MUST
                            th SHOULD
                            th MAY
                    tbody
                        tr
                            td(class="current-support-container " + test.core_must_support_string.substring(0,2)) #{test.core_must_support_string}
                            td(class="current-support-container " + test.core_should_support_string.substring(0,2)) #{test.core_should_support_string}
                            td(class="current-support-container " + test.core_may_support_string.substring(0,2)) #{test.core_may_support_string}

            if test.assertions
                h3(id="assertion-support-table") Assertion support summary by assertion
                table.support-table.assertion-container
                    thead
                        tr
                            th Feature
                            th Assertion
                            th Support
                            th Has failing tests
                    tbody
                        each assertion in test.assertions
                            tr
                                td #{assertion.feature_title}
                                td
                                    a(href="#assertion-" + assertion.feature_id.replace('/', '-') + "-" + assertion.feature_assertion_id) #{assertion.assertion_title}
                                td(class="support-case " + assertion.core_support_string.substring(0, 2)) #{assertion.core_support_string}
                                - var numfailing = assertion.core_support.filter(x => x === "n").length
                                - var tdclass = "support-case";
                                if (numfailing)
                                    - var tdclass = "support-case n";
                                td(class=tdclass)
                                    if numfailing
                                        span Yes
                                    else
                                        span No

            each assertion in test.assertions
                div.assertion-container
                    h3(id="assertion-"+assertion.feature_id.replace('/', '-') + "-" + assertion.feature_assertion_id) #{assertion.feature_title}: #{assertion.assertion_title}

                    if (assertion.assertion_rationale)
                        p Rationale: #{assertion.assertion_rationale}

                    if (assertion.assertion_examples)
                        p Examples of assistive technologies support this assertion:

                        ul
                            for example in assertion.assertion_examples
                                li #{example}

                    p This assertion is from the #[a(href="/tech/"+assertion.feature_id) #{assertion.feature_title} feature].

                    table
                        tr
                            th AT
                            th Browser
                            th Has Support
                            th Output
                            th Action
                        each at in ATBrowsers.core_at
                            each browser in ATBrowsers.at[at].core_browsers
                                tr
                                    td= ATBrowsers.at[at].title
                                        if test.versions[at] && test.versions[at].browsers[browser] && test.versions[at].browsers[browser].at_version
                                            span= ' ' + test.versions[at].browsers[browser].at_version
                                    td= ATBrowsers.browsers[browser].title
                                        if test.versions[at] && test.versions[at].browsers[browser] && test.versions[at].browsers[browser].browser_version
                                            span= ' ' + test.versions[at].browsers[browser].browser_version
                                    td(class='support-case ' + assertion.results[at].browsers[browser].support)= assertion.results[at].browsers[browser].support_string
                                    td
                                        if (assertion.results[at].browsers[browser].output)
                                            ul
                                                each output in assertion.results[at].browsers[browser].output
                                                    li
                                                        strong= "Result: "
                                                        span(class="output-result "+output.result)= " (" + output.result + ")"
                                                        ul
                                                            li
                                                                strong= "command: "
                                                                if (ATBrowsers.at[at].commands[output.command])
                                                                    span=  ATBrowsers.at[at].commands[output.command].command
                                                                else
                                                                    strong= ", " + output.command

                                                            if (output.from && output.from !== "na")
                                                                li
                                                                    strong= "location before command: "
                                                                    span= output.from

                                                            if (output.to && output.to !== "na")
                                                                li
                                                                    strong= "location after command: "
                                                                    span= output.to
                                                            li
                                                                strong Output:
                                                                span= " " + output.output

                                            if (assertion.results[at].browsers[browser].notes && assertion.results[at].browsers[browser].notes)
                                                strong Notes:
                                                span= " " + assertion.results[at].browsers[browser].notes
                                        else
                                            span -
                                    td
                                        a(href="/tests/" + testIdHelper.makeSafe(test.id) + "/" + testIdHelper.makeSafe(assertion.feature_id) + "/" + assertion.feature_assertion_id + "/" + at + "/" + browser) More information

                    details.indent
                        summary
                            h4 Extended Support for: #{assertion.feature_title}: #{assertion.assertion_title}

                        p These are less common combinations
                        table
                            tr
                                th AT
                                th Browser
                                th Has Support
                                th Output
                                th Action
                            each at in ATBrowsers.at
                                - var browsers = at.extended_browsers
                                if ATBrowsers.extended_at.includes(at.id)
                                    - var browsers = browsers.concat(at.core_browsers)
                                each browser in browsers
                                    tr
                                        td= at.title
                                            if test.versions[at.id] && test.versions[at.id].browsers[browser] && test.versions[at.id].browsers[browser].at_version
                                                span= ' ' + test.versions[at.id].browsers[browser].at_version
                                        td= ATBrowsers.browsers[browser].title
                                            if test.versions[at.id] && test.versions[at.id].browsers[browser] && test.versions[at.id].browsers[browser].browser_version
                                                span= ' ' + test.versions[at.id].browsers[browser].browser_version
                                        td(class='support-case ' + assertion.results[at.id].browsers[browser].support)= assertion.results[at.id].browsers[browser].support_string
                                        td
                                            if (assertion.results[at.id].browsers[browser].output)
                                                ul
                                                    each output in assertion.results[at.id].browsers[browser].output
                                                        li
                                                            strong Result:
                                                            span= " (" + output.result + ")"
                                                            ul
                                                                li
                                                                    strong= "command: "
                                                                    if (ATBrowsers.at[at.id].commands[output.command])
                                                                        span=  ATBrowsers.at[at.id].commands[output.command].command
                                                                    else
                                                                        strong= ", " + output.command

                                                                if (output.from && output.from !== "na")
                                                                    li
                                                                        strong= "from: "
                                                                        span= output.from

                                                                if (output.to && output.to !== "na")
                                                                    li
                                                                        strong= "to: "
                                                                        span= output.to
                                                                li
                                                                    strong Output:
                                                                    span= " " + output.output
                                            else
                                                span -
                                        td
                                            a(href="/tests/" + testIdHelper.makeSafe(test.id) + "/" + testIdHelper.makeSafe(assertion.feature_id) + "/" + assertion.feature_assertion_id + "/" + at.id + "/" + browser) More information
            h2(id="history") History
            ul
                each record in test.history
                    li
                        strong= record.date + ' '
                        span!= md.renderInline(record.message)

        div.sidebar
            h2 Related Features
            p This test is found in the following features:
            ul
                each featureInfo in features
                    li
                        a(href="/tech/" + featureInfo.featureId) #{featureInfo.title}

            h2 Is something not right?
            p We use our #[a(href="https://github.com/accessibilitysupported/accessibilitysupported") GitHub repository] to manage our issue tracking. Please provide as much information as you can for issues, and please leave the id in the issue title intact.

            ul
                li
                    a(href='https://github.com/accessibilitysupported/accessibilitysupported/issues/new?title='+test.id+'&labels=test%20case') There is a problem with this test case (the test file, procedure, expected results, etc)
                li
                    p Use the support tables to view details and report issues or changes.

    script(src="/js/feature-test.js")
