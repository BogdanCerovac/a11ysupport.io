{
  "title": "Basic html range input test",
  "description": "A basic html range input test.",
  "html_file": "html/inputs.html",
  "assertions": [
    {
      "feature_id": "html/input(type-range)_element",
      "feature_assertion_id": "convey_name"
    },
    {
      "feature_id": "html/input(type-range)_element",
      "feature_assertion_id": "convey_role"
    },
    {
      "feature_id": "html/input(type-range)_element",
      "feature_assertion_id": "convey_value"
    },
    {
      "feature_id": "html/input(type-range)_element",
      "feature_assertion_id": "convey_change_in_value"
    },
    {
      "feature_id": "html/input(type-range)_element",
      "feature_assertion_id": "provide_shortcuts"
    },
    {
      "feature_id": "html/input(type-range)_element",
      "feature_assertion_id": "increment_decrement"
    },
    {
      "feature_id": "html/max_attribute",
      "feature_assertion_id": "convey_property"
    },
    {
      "feature_id": "html/min_attribute",
      "feature_assertion_id": "convey_property"
    }
  ],
  "commands": {
    "dragon_win": {
      "chrome": [
        {
          "command": "activate_name",
          "output": "input was not focued",
          "css_target": "input[type=\"range\"]",
          "from": "na",
          "to": "na",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "fail",
              "notes": "said \"click volume\""
            }
          ]
        },
        {
          "command": "activate_role",
          "output": "input was not flagged with a number",
          "css_target": "input[type=\"range\"]",
          "from": "na",
          "to": "na",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "fail",
              "notes": "said \"click edit\""
            }
          ]
        },
        {
          "command": "keypress",
          "output": "value was incremented and decremented",
          "css_target": "input[type=\"number\"]",
          "from": "na",
          "to": "na",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "increment_decrement",
              "result": "pass",
              "notes": "said \"press up arrow\" and \"press down arrow\""
            }
          ]
        }
      ]
    },
    "jaws": {
      "chrome": [
        {
          "command": "next_item",
          "from": "before target",
          "to": "target",
          "output": "\"volume, left right slider. 7, min 0, max 11.\"",
          "css_target": "input[type=\"range\"]",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            }
          ]
        },
        {
          "command": "next_focusable_item",
          "from": "before target",
          "to": "target",
          "output": "\"volume, left right slider, 7\"",
          "css_target": "input[type=\"range\"]",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            }
          ]
        },
        {
          "command": "next_form_field",
          "output": "\"volume, left right slider. 6, min 0, max 11.\"",
          "css_target": "input[type=\"range\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "provide_shortcuts",
              "result": "pass"
            }
          ]
        },
        {
          "command": "open_element_list",
          "output": "in list of form fields as \"volume slider 6 checked not checked sub men\" ",
          "css_target": "input[type=\"range\"]",
          "from": "na",
          "to": "na",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass",
              "notes": "partial because it also conveys checked semantics here, which is inaccurate"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass",
              "notes": "partial because it also conveys checked semantics here, which is inaccurate"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass",
              "notes": "partial because it also conveys checked semantics here, which is inaccurate"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "provide_shortcuts",
              "result": "partial",
              "notes": "partial because it also conveys checked semantics here, which is inaccurate"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "new value was announced",
          "css_target": "input[type=\"range\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_change_in_value",
              "result": "pass",
              "notes": "use left and right arrow keys"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "increment and decrement was performed",
          "css_target": "input[type=\"number\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "increment_decrement",
              "result": "pass",
              "notes": "use left and right arrow keys"
            }
          ]
        },
        {
          "command": "next_item",
          "from": "before target",
          "to": "target",
          "output": "\"volume, left right slider. 7, min 0, max 11.\"",
          "css_target": "*[max]",
          "results": [
            {
              "feature_id": "html/max_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "min and max was implied by not allowing the value to be changed beyond the min and max values",
          "css_target": "*[max]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/max_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass",
              "notes": "use left and right arrow keys"
            }
          ]
        },
        {
          "command": "next_item",
          "from": "before target",
          "to": "target",
          "output": "\"volume, left right slider. 7, min 0, max 11.\"",
          "css_target": "*[min]",
          "results": [
            {
              "feature_id": "html/min_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "min and max was implied by not allowing the value to be changed beyond the min and max values",
          "css_target": "*[min]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/min_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass",
              "notes": "use left and right arrow keys"
            }
          ]
        }
      ],
      "ie": [
        {
          "command": "next_item",
          "from": "before target",
          "to": "target",
          "output": "\"volume, left right slider, 6.\"",
          "css_target": "input[type=\"range\"]",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            }
          ]
        },
        {
          "command": "next_focusable_item",
          "from": "before target",
          "to": "target",
          "output": "\"volume, left right slider, 6.\"",
          "css_target": "input[type=\"range\"]",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            }
          ]
        },
        {
          "command": "next_form_field",
          "output": "\"volume, left right slider, 6.\"",
          "css_target": "input[type=\"range\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "provide_shortcuts",
              "result": "pass"
            }
          ]
        },
        {
          "command": "open_element_list",
          "output": "in list of form controls \"volume slider 6\"",
          "css_target": "input[type=\"range\"]",
          "from": "na",
          "to": "na",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "provide_shortcuts",
              "result": "pass"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "new value was announced",
          "css_target": "input[type=\"range\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_change_in_value",
              "result": "pass",
              "notes": "use left and right arrow keys"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "increment and decrement was performed",
          "css_target": "input[type=\"number\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "increment_decrement",
              "result": "pass",
              "notes": "use left and right arrow keys"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "min and max was implied by not allowing the value to be changed beyond the min and max values",
          "css_target": "*[max]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/max_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass",
              "notes": "use left and right arrow keys"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "min and max was implied by not allowing the value to be changed beyond the min and max values",
          "css_target": "*[min]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/min_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass",
              "notes": "use left and right arrow keys"
            }
          ]
        }
      ],
      "firefox": [
        {
          "command": "next_item",
          "from": "before target",
          "to": "target",
          "output": "\"volume, left right slider. 7, min 0, max 11.\"",
          "css_target": "input[type=\"range\"]",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            }
          ]
        },
        {
          "command": "next_focusable_item",
          "from": "before target",
          "to": "target",
          "output": "\"volume, left right slider, 6.\"",
          "css_target": "input[type=\"range\"]",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            }
          ]
        },
        {
          "command": "next_form_field",
          "output": "\"volume, up down slider. 6, min 0, max 11.\"",
          "css_target": "input[type=\"range\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass",
              "notes": "partial because it inconsistently announces as \"up down slider\" instead of \"left right slider\""
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass",
              "notes": "partial because it inconsistently announces as \"up down slider\" instead of \"left right slider\""
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass",
              "notes": "partial because it inconsistently announces as \"up down slider\" instead of \"left right slider\""
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "provide_shortcuts",
              "result": "partial",
              "notes": "partial because it inconsistently announces as \"up down slider\" instead of \"left right slider\""
            }
          ]
        },
        {
          "command": "open_element_list",
          "output": "in list of form fields as \"volume slider 6\"",
          "css_target": "input[type=\"range\"]",
          "from": "na",
          "to": "na",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "provide_shortcuts",
              "result": "pass"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "new value was announced",
          "css_target": "input[type=\"range\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_change_in_value",
              "result": "pass",
              "notes": "use left and right arrow keys"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "increment and decrement was performed",
          "css_target": "input[type=\"number\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "increment_decrement",
              "result": "pass",
              "notes": "use left and right arrow keys"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "min and max was implied by not allowing the value to be changed beyond the min and max values",
          "css_target": "*[max]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/max_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass",
              "notes": "use left and right arrow keys"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "min and max was implied by not allowing the value to be changed beyond the min and max values",
          "css_target": "*[min]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/min_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass",
              "notes": "use left and right arrow keys"
            }
          ]
        }
      ]
    },
    "narrator": {
      "edge": [
        {
          "command": "next_item",
          "from": "before target",
          "to": "target",
          "output": "\"volume, slider, at\"",
          "css_target": "input[type=\"range\"]",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "fail"
            }
          ]
        },
        {
          "command": "next_focusable_item",
          "from": "before target",
          "to": "target",
          "output": "\"volume, slider, at\"",
          "css_target": "input[type=\"range\"]",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "fail"
            }
          ]
        },
        {
          "command": "next_form_field",
          "output": "\"volume, slider at\"",
          "css_target": "input[type=\"range\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "fail"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "provide_shortcuts",
              "result": "pass"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "new value was not announced",
          "css_target": "input[type=\"range\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_change_in_value",
              "result": "fail",
              "notes": "use left and right arrow keys"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "increment and decrement was performed",
          "css_target": "input[type=\"number\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "increment_decrement",
              "result": "pass",
              "notes": "use left and right arrow keys"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "when attempting to go beyond the max: \"no higher value\"",
          "css_target": "*[max]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/max_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass",
              "notes": "use left and right arrow keys"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "when attempting to go below the min: \"no lower value\"",
          "css_target": "*[min]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/min_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass",
              "notes": "use left and right arrow keys"
            }
          ]
        }
      ]
    },
    "nvda": {
      "chrome": [
        {
          "command": "next_item",
          "from": "before target",
          "to": "target",
          "output": "\"volume, slider, volume\"",
          "css_target": "input[type=\"range\"]",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "fail"
            }
          ]
        },
        {
          "command": "next_focusable_item",
          "from": "before target",
          "to": "target",
          "output": "\"volume, slider, 6\"",
          "css_target": "input[type=\"range\"]",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            }
          ]
        },
        {
          "command": "next_form_field",
          "output": "\"no next form field\"",
          "css_target": "input[type=\"range\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "na"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "na"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "na"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "provide_shortcuts",
              "result": "fail"
            }
          ]
        },
        {
          "command": "open_element_list",
          "output": "not in list of form fields",
          "css_target": "input[type=\"range\"]",
          "from": "na",
          "to": "na",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "na"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "na"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "na"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "provide_shortcuts",
              "result": "fail"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "new value was announced",
          "css_target": "input[type=\"range\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_change_in_value",
              "result": "pass",
              "notes": "used left and right arrow keys"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "increment and decrement was performed",
          "css_target": "input[type=\"number\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "increment_decrement",
              "result": "pass",
              "notes": "use left and right arrow keys"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "min and max was implied by not allowing the value to be changed beyond the min and max values",
          "css_target": "*[max]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/max_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass",
              "notes": "use left and right arrow keys"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "min and max was implied by not allowing the value to be changed beyond the min and max values",
          "css_target": "*[min]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/min_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass",
              "notes": "use left and right arrow keys"
            }
          ]
        }
      ],
      "firefox": [
        {
          "command": "next_item",
          "from": "before target",
          "to": "target",
          "output": "\"clickable, volume, slider, 6\"",
          "css_target": "input[type=\"range\"]",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            }
          ]
        },
        {
          "command": "next_focusable_item",
          "from": "before target",
          "to": "target",
          "output": "\"volume, slider, 6\"",
          "css_target": "input[type=\"range\"]",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            }
          ]
        },
        {
          "command": "next_form_field",
          "output": "\"no next form field\"",
          "css_target": "input[type=\"range\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "na"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "na"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "na"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "provide_shortcuts",
              "result": "fail"
            }
          ]
        },
        {
          "command": "open_element_list",
          "output": "not in list of form fields",
          "css_target": "input[type=\"range\"]",
          "from": "na",
          "to": "na",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "na"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "na"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "na"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "provide_shortcuts",
              "result": "fail"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "new value was announced",
          "css_target": "input[type=\"range\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_change_in_value",
              "result": "pass",
              "notes": "use left and right arrow keys"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "increment and decrement was performed",
          "css_target": "input[type=\"number\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "increment_decrement",
              "result": "pass",
              "notes": "use left and right arrow keys"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "min and max was implied by not allowing the value to be changed beyond the min and max values",
          "css_target": "*[max]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/max_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass",
              "notes": "use left and right arrow keys"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "min and max was implied by not allowing the value to be changed beyond the min and max values",
          "css_target": "*[min]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/min_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass",
              "notes": "use left and right arrow keys"
            }
          ]
        }
      ]
    },
    "talkback": {
      "and_chr": [
        {
          "command": "next_item",
          "from": "before target",
          "to": "target",
          "output": "\"54%, volume, slider, use volume keys to adjust\"",
          "css_target": "input[type=\"range\"]",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            }
          ]
        },
        {
          "command": "next_form_field",
          "output": "\"54%, volume, slider, use volume keys to adjust\"",
          "css_target": "input[type=\"range\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "provide_shortcuts",
              "result": "pass"
            }
          ]
        },
        {
          "command": "increment",
          "output": "new value was not announced.",
          "css_target": "input[type=\"range\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_change_in_value",
              "result": "fail"
            }
          ]
        },
        {
          "command": "decrement",
          "output": "new value was not announced.",
          "css_target": "input[type=\"range\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_change_in_value",
              "result": "fail"
            }
          ]
        },
        {
          "command": "increment",
          "from": "target",
          "to": "target",
          "output": "value was adjusted",
          "css_target": "input[type=\"number\"]",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "increment_decrement",
              "result": "partial",
              "notes": "could only perform this action once. future attempts did not work."
            }
          ]
        },
        {
          "command": "decrement",
          "from": "target",
          "to": "target",
          "output": "value was adjusted",
          "css_target": "input[type=\"number\"]",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "increment_decrement",
              "result": "partial",
              "notes": "could only perform this action once. future attempts did not work."
            }
          ]
        },
        {
          "command": "next_item",
          "from": "before",
          "to": "target",
          "output": "implied by percentage value",
          "css_target": "*[max]",
          "results": [
            {
              "feature_id": "html/max_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass"
            }
          ]
        },
        {
          "command": "next_item",
          "from": "before",
          "to": "target",
          "output": "implied by percentage value",
          "css_target": "*[min]",
          "results": [
            {
              "feature_id": "html/min_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass"
            }
          ]
        }
      ]
    },
    "va_and": {
      "and_chr": [
        {
          "command": "activate_name",
          "output": "input was focused",
          "css_target": "input[type=\"range\"]",
          "from": "na",
          "to": "na",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass",
              "notes": "said \"tap volume\""
            }
          ]
        },
        {
          "command": "show_numbers",
          "output": "input was flagged with a number",
          "css_target": "input[type=\"range\"]",
          "from": "na",
          "to": "na",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            }
          ]
        }
      ]
    },
    "vo_ios": {
      "ios_saf": [
        {
          "command": "next_item",
          "from": "before target",
          "to": "target",
          "output": "\"volume, 6, 54.5%, adjustable, swipe up or down with one finger to adjust the value\"",
          "css_target": "input[type=\"range\"]",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            }
          ]
        },
        {
          "command": "next_form_field",
          "output": "\"volume, 6, 54.5%, adjustable, swipe up or down with one finger to adjust the value\"",
          "css_target": "input[type=\"range\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "provide_shortcuts",
              "result": "pass"
            }
          ]
        },
        {
          "command": "increment",
          "output": "new value was announced",
          "css_target": "input[type=\"range\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_change_in_value",
              "result": "pass"
            }
          ]
        },
        {
          "command": "decrement",
          "output": "new value was announced",
          "css_target": "input[type=\"range\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_change_in_value",
              "result": "pass"
            }
          ]
        },
        {
          "command": "increment",
          "from": "target",
          "to": "target",
          "output": "value was incremented",
          "css_target": "input[type=\"number\"]",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "increment_decrement",
              "result": "pass"
            }
          ]
        },
        {
          "command": "decrement",
          "from": "target",
          "to": "target",
          "output": "value was decremented",
          "css_target": "input[type=\"number\"]",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "increment_decrement",
              "result": "pass"
            }
          ]
        },
        {
          "command": "next_item",
          "from": "before target",
          "to": "target",
          "output": "\"volume, 6, 54.5%, adjustable, swipe up or down with one finger to adjust the value\"",
          "css_target": "*[max]",
          "results": [
            {
              "feature_id": "html/max_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass",
              "notes": "implied by percentage"
            }
          ]
        },
        {
          "command": "increment",
          "from": "target",
          "to": "target",
          "output": "100% is announced with an earcon indicating the max value has been reached",
          "css_target": "*[max]",
          "results": [
            {
              "feature_id": "html/max_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass"
            }
          ]
        },
        {
          "command": "next_item",
          "from": "before target",
          "to": "target",
          "output": "\"volume, 6, 54.5%, adjustable, swipe up or down with one finger to adjust the value\"",
          "css_target": "*[min]",
          "results": [
            {
              "feature_id": "html/min_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass",
              "notes": "implied by percentage"
            }
          ]
        },
        {
          "command": "increment",
          "from": "target",
          "to": "target",
          "output": "0.00% is announced with an earcon indicating the max value has been reached",
          "css_target": "*[min]",
          "results": [
            {
              "feature_id": "html/min_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass"
            }
          ]
        }
      ]
    },
    "vo_macos": {
      "safari": [
        {
          "command": "next_item",
          "from": "before target",
          "to": "target",
          "output": "\"6, volume, slider\"",
          "css_target": "input[type=\"range\"]",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            }
          ]
        },
        {
          "command": "next_focusable_item",
          "from": "before target",
          "to": "target",
          "output": "\"6, volume, slider\"",
          "css_target": "input[type=\"range\"]",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            }
          ]
        },
        {
          "command": "next_form_field",
          "output": "\"6, volume, slider\"",
          "css_target": "input[type=\"range\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "provide_shortcuts",
              "result": "pass"
            }
          ]
        },
        {
          "command": "open_element_list",
          "output": "in list of form controls as \"6 volume slider\"",
          "css_target": "input[type=\"range\"]",
          "from": "na",
          "to": "na",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "provide_shortcuts",
              "result": "pass"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "new value was announced",
          "css_target": "input[type=\"range\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_change_in_value",
              "result": "pass",
              "notes": "used left and right arrow keys"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "new value was announced",
          "css_target": "input[type=\"number\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "increment_decrement",
              "result": "pass",
              "notes": "used right and left arrow keys"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "implied by not being able to adjust the value beyond the min and max values",
          "css_target": "*[max]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/max_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass",
              "notes": "used left and right arrow keys"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "implied by not being able to adjust the value beyond the min and max values",
          "css_target": "*[min]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/min_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass",
              "notes": "used left and right arrow keys"
            }
          ]
        }
      ]
    },
    "orca": {
      "firefox": [
        {
          "command": "next_item",
          "from": "before target",
          "to": "target",
          "output": "\"volume, slider, 6\"",
          "css_target": "input[type=\"range\"]",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            }
          ]
        },
        {
          "command": "next_focusable_item",
          "from": "before target",
          "to": "target",
          "output": "\"volume, slider, 6\"",
          "css_target": "input[type=\"range\"]",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "pass"
            }
          ]
        },
        {
          "command": "list_form_fields",
          "output": "not in list of form fields",
          "css_target": "input[type=\"range\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "na"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "na"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_value",
              "result": "na"
            },
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "provide_shortcuts",
              "result": "fail"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "new value was announced",
          "css_target": "input[type=\"range\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_change_in_value",
              "result": "pass",
              "notes": "used left and right arrow keys"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "new value was announced",
          "css_target": "input[type=\"number\"]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "increment_decrement",
              "result": "pass",
              "notes": "used left and right arrow keys"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "implied by not being able to adjust the value beyond the min and max values",
          "css_target": "*[max]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/max_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass",
              "notes": "used left and right arrow keys"
            }
          ]
        },
        {
          "command": "forms_mode_keyboard_command",
          "output": "implied by not being able to adjust the value beyond the min and max values",
          "css_target": "*[min]",
          "from": "before target",
          "to": "target",
          "results": [
            {
              "feature_id": "html/min_attribute",
              "feature_assertion_id": "convey_property",
              "result": "pass",
              "notes": "used left and right arrow keys"
            }
          ]
        }
      ]
    },
    "vc_ios": {
      "ios_saf": [
        {
          "command": "activate_name",
          "output": "input was tapped",
          "css_target": "input[type=\"range\"]",
          "from": "na",
          "to": "na",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass",
              "notes": "said \"tap volume\""
            }
          ]
        }
      ]
    },
    "vc_macos": {
      "safari": [
        {
          "command": "activate_name",
          "output": "input was not focused",
          "css_target": "input[type=\"range\"]",
          "from": "na",
          "to": "na",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "fail",
              "notes": "said \"click volume\""
            }
          ]
        },
        {
          "command": "show_numbers",
          "output": "input was not flagged with a number",
          "css_target": "input[type=\"range\"]",
          "from": "na",
          "to": "na",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "fail"
            }
          ]
        }
      ]
    },
    "wsr": {
      "chrome": [
        {
          "command": "activate_name",
          "output": "input was focused",
          "css_target": "input[type=\"range\"]",
          "from": "na",
          "to": "na",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_name",
              "result": "pass",
              "notes": "said \"click volume\""
            }
          ]
        },
        {
          "command": "show_numbers",
          "output": "input was flagged with a number",
          "css_target": "input[type=\"range\"]",
          "from": "na",
          "to": "na",
          "results": [
            {
              "feature_id": "html/input(type-range)_element",
              "feature_assertion_id": "convey_role",
              "result": "pass"
            }
          ]
        }
      ]
    }
  },
  "history": [
    {
      "date": "2019-10-22",
      "message": "Add this test"
    }
  ],
  "versions": {
    "dragon_win": {
      "browsers": {
        "chrome": {
          "at_version": "15.30",
          "os_version": "1903",
          "browser_version": "77",
          "date": "2019-10-23"
        }
      }
    },
    "jaws": {
      "browsers": {
        "chrome": {
          "at_version": "2019.1909.28",
          "os_version": "1903",
          "browser_version": "77",
          "date": "2019-10-23"
        },
        "ie": {
          "at_version": "2019.1909.28",
          "os_version": "1903",
          "browser_version": "11",
          "date": "2019-10-23"
        },
        "firefox": {
          "at_version": "2019.1909.28",
          "os_version": "1903",
          "browser_version": "69",
          "date": "2019-10-23"
        }
      }
    },
    "narrator": {
      "browsers": {
        "edge": {
          "at_version": "1903",
          "os_version": "1903",
          "browser_version": "44",
          "date": "2019-10-23"
        }
      }
    },
    "nvda": {
      "browsers": {
        "chrome": {
          "at_version": "2019.2.1",
          "os_version": "1903",
          "browser_version": "77",
          "date": "2019-10-23"
        },
        "firefox": {
          "at_version": "2019.2.1",
          "os_version": "1903",
          "browser_version": "69",
          "date": "2019-10-23"
        }
      }
    },
    "talkback": {
      "browsers": {
        "and_chr": {
          "at_version": "7.3.0",
          "os_version": "7.0",
          "browser_version": "77",
          "date": "2019-10-23"
        }
      }
    },
    "va_and": {
      "browsers": {
        "and_chr": {
          "at_version": "3.1",
          "os_version": "7.0",
          "browser_version": "77",
          "date": "2019-10-23"
        }
      }
    },
    "vo_ios": {
      "browsers": {
        "ios_saf": {
          "at_version": "13.1.3",
          "os_version": "13.1.3",
          "browser_version": "13.1",
          "date": "2019-10-23"
        }
      }
    },
    "vo_macos": {
      "browsers": {
        "safari": {
          "at_version": "10.15",
          "os_version": "10.15",
          "browser_version": "13.0.2",
          "date": "2019-10-23"
        }
      }
    },
    "orca": {
      "browsers": {
        "firefox": {
          "at_version": "3.31.4",
          "os_version": "Ubuntu 19.04",
          "browser_version": "69",
          "date": "2019-10-23"
        }
      }
    },
    "vc_ios": {
      "browsers": {
        "ios_saf": {
          "at_version": "13.1.3",
          "os_version": "13.1.3",
          "browser_version": "13.1",
          "date": "2019-10-23"
        }
      }
    },
    "vc_macos": {
      "browsers": {
        "safari": {
          "at_version": "10.15",
          "os_version": "10.15",
          "browser_version": "13.0.2",
          "date": "2019-10-23"
        }
      }
    },
    "wsr": {
      "browsers": {
        "chrome": {
          "at_version": "1903",
          "os_version": "1903",
          "browser_version": "77",
          "date": "2019-10-23"
        }
      }
    }
  }
}
